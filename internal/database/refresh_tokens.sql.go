// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
VALUES (
$1,
$2,
$3,
$4,
$5
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getTokenByToken = `-- name: GetTokenByToken :one
SELECT
    token, created_at, updated_at, user_id, expires_at, revoked_at
FROM
    refresh_tokens rt
WHERE
    rt.Token = $1
`

func (q *Queries) GetTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserFromToken = `-- name: GetUserFromToken :one
SELECT
    rt.token,
    u.id,
    rt.expires_at,
    rt.revoked_AT
FROM
    refresh_tokens rt
JOIN
    users u on u.id = rt.user_id
WHERE
    rt.token = $1
`

type GetUserFromTokenRow struct {
	Token     string
	ID        uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserFromToken(ctx context.Context, token string) (GetUserFromTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromToken, token)
	var i GetUserFromTokenRow
	err := row.Scan(
		&i.Token,
		&i.ID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :one
UPDATE
    refresh_tokens
SET
    updated_at = $1,
    revoked_AT = $2
WHERE
    token = $3
RETURNING
token, created_at, updated_at, user_id, expires_at, revoked_at
`

type RevokeRefreshTokenParams struct {
	UpdatedAt time.Time
	RevokedAt sql.NullTime
	Token     string
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, arg RevokeRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshToken, arg.UpdatedAt, arg.RevokedAt, arg.Token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
